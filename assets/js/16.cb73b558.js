(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{371:function(e,t,a){"use strict";a.r(t);var n=a(41),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vue3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3"}},[e._v("#")]),e._v(" Vue3")]),e._v(" "),a("h2",{attrs:{id:"响应式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式"}},[e._v("#")]),e._v(" 响应式")]),e._v(" "),a("h3",{attrs:{id:"reactive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reactive"}},[e._v("#")]),e._v(" "),a("code",[e._v("reactive()")])]),e._v(" "),a("p",[e._v("从 JS 对象中创建响应式状态，组件的 "),a("code",[e._v("data()")]),e._v(" 返回的状态也在内部调用了 "),a("code",[e._v("reactive()")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { reactive } from 'vue'\n\n// reactive state\nconst state = reactive({\n  count: 0\n})\n")])])]),a("h3",{attrs:{id:"ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[e._v("#")]),e._v(" "),a("code",[e._v("ref()")])]),e._v(" "),a("p",[e._v("将独立的值包装为响应式对象，该对象仅包含一个 "),a("code",[e._v("value")]),e._v(" 属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { ref } from 'vue'\n\nconst count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1\n")])])]),a("p",[e._v("该对象通过 "),a("code",[e._v("setup()")]),e._v(" 返回作为渲染上下文的属性或者在模板中使用时会自动解包，无需添加 "),a("code",[e._v(".value")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<template>\n  <div>\n    <span>{{ count }}</span>\n    <button @click=\"count ++\">Increment count</button>\n  </div>\n</template>\n\n<script>\n  import { ref } from 'vue'\n  export default {\n    setup() {\n      const count = ref(0)\n      return {\n        count\n      }\n    }\n  }\n<\/script>\n")])])]),a("p",[e._v("在响应式对象中访问 "),a("code",[e._v("ref")]),e._v(" 生成的对象时，也会自动解包")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1\n")])])]),a("p",[e._v("如果将一个新的 ref 指定给一个已指向已有 ref 的属性，新的 ref 会替换旧的指向")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const otherCount = ref(2)\n\nstate.count = otherCount\nconsole.log(state.count) // 2\nconsole.log(count.value) // 1\n")])])]),a("p",[e._v("ref 仅会在响应式的 "),a("strong",[e._v("Object")]),e._v(" 中自动解包，在 Array 或 Map 中需要使用 "),a("code",[e._v(".value")]),e._v(" 访问属性值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const books = reactive([ref('Vue 3 Guide')])\n// need .value here\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// need .value here\nconsole.log(map.get('count').value)\n")])])]),a("h3",{attrs:{id:"torefs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#torefs"}},[e._v("#")]),e._v(" "),a("code",[e._v("toRefs()")])]),e._v(" "),a("p",[e._v("使用解构赋值时，赋值后的变量会丢失数据的响应式，使用 "),a("code",[e._v("toRefs()")]),e._v(" 可以将响应式对象转换为 ref 集合，之后再解构，将保持被赋值变量的响应式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { reactive, toRefs } from 'vue'\n\nconst book = reactive({\n  author: 'Vue Team',\n  year: '2020',\n  title: 'Vue 3 Guide',\n  description: 'You are reading this book right now ;)',\n  price: 'free'\n})\n\nlet { author, title } = toRefs(book)\n\ntitle.value = 'Vue 3 Detailed Guide' // we need to use .value as title is a ref now\nconsole.log(book.title) // 'Vue 3 Detailed Guide'\n")])])]),a("h3",{attrs:{id:"readonly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readonly"}},[e._v("#")]),e._v(" "),a("code",[e._v("readonly()")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { reactive, readonly } from 'vue'\n\nconst original = reactive({ count: 0 })\n\nconst copy = readonly(original)\n\n// mutating original will trigger watchers relying on the copy\noriginal.count++\n\n// mutating the copy will fail and result in a warning\ncopy.count++ // warning: \"Set operation on key 'count' failed: target is readonly.\"\n")])])]),a("h2",{attrs:{id:"composition-api-setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composition-api-setup"}},[e._v("#")]),e._v(" Composition API (setup)")]),e._v(" "),a("p",[e._v("当一个组件中的业务越来越多，Vue 2 的组件代码组织会使得同一个业务相关的代码被分散在组件的不同位置，不便于理解和维护，Vue 3 的 Composition API 允许代码按业务进行拆分，在组件的 "),a("code",[e._v("setup")]),e._v(" 选项中统一引入。")]),e._v(" "),a("p",[a("code",[e._v("setup")]),e._v(" 在组件被创建之前执行，所以 "),a("code",[e._v("setup")]),e._v(" 选项中无法访问 "),a("code",[e._v("this")]),e._v(" ，这意味着也无法访问组件的本地状态 "),a("code",[e._v("data")]),e._v("，计算属性 "),a("code",[e._v("computed")]),e._v("，方法 "),a("code",[e._v("methods")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"setup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup"}},[e._v("#")]),e._v(" setup()")]),e._v(" "),a("p",[e._v("接收两个参数："),a("code",[e._v("props")]),e._v(", "),a("code",[e._v("context")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("setup (props, { attrs, slots, emit }) {\n}\n")])])]),a("h4",{attrs:{id:"props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" "),a("code",[e._v("props")])]),e._v(" "),a("p",[e._v("传入组件的属性，并且是响应式的，如果使用解构语法，需要使用 "),a("code",[e._v("toRefs")]),e._v(" 保持响应式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { toRefs } from 'vue'\n\nsetup(props) {\n  const { title } = toRefs(props)\n  console.log(title.value)\n}\n")])])]),a("h4",{attrs:{id:"context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" "),a("code",[e._v("context")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { attrs, slots, emit } = context\n")])])]),a("h3",{attrs:{id:"lifecycle-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lifecycle-hooks"}},[e._v("#")]),e._v(" Lifecycle Hooks")]),e._v(" "),a("p",[a("code",[e._v("setup()")]),e._v(" 中的生命周期函数使用前缀 "),a("code",[e._v("on")]),e._v("，例如 "),a("code",[e._v("onMounted()")]),e._v("，生命周期函数接收函数类型的参数。")]),e._v(" "),a("p",[a("code",[e._v("beforeCreate")]),e._v(" 和 "),a("code",[e._v("created")]),e._v(" 在 "),a("code",[e._v("setup()")]),e._v(" 中不需要明确定义，本应写在其中的代码直接写在 "),a("code",[e._v("setup()")]),e._v(" 函数中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n  setup() {\n    // mounted\n    onMounted(() => {\n      console.log('Component is mounted!')\n    })\n  }\n}\n")])])]),a("hr"),e._v(" "),a("h2",{attrs:{id:"应用程序和组件实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用程序和组件实例"}},[e._v("#")]),e._v(" 应用程序和组件实例")]),e._v(" "),a("h3",{attrs:{id:"createapp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createapp"}},[e._v("#")]),e._v(" createApp")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("createApp")]),e._v(" 创建 Vue 应用示例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const app = Vue.createApp({ /* options */ })\n\napp.component('SearchInput', SearchInputComponent)\napp.directive('focus', FocusDirective)\napp.use(LocalePlugin)\n\n// 或链式调用\nVue.createApp({})\n  .component('SearchInput', SearchInputComponent)\n  .directive('focus', FocusDirective)\n  .use(LocalePlugin)\n")])])]),a("h3",{attrs:{id:"provide-inject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[e._v("#")]),e._v(" Provide / Inject")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// in the entry\napp.provide('guide', 'Vue 3 Guide')\n\n// in a child component\nexport default {\n  inject: {\n    book: {\n      from: 'guide'\n    }\n  },\n  template: `<div>{{ book }}</div>`\n}\n")])])]),a("h2",{attrs:{id:"class-和-style-绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-和-style-绑定"}},[e._v("#")]),e._v(" Class 和 Style 绑定")]),e._v(" "),a("p",[e._v("由于 Vue 3 组件支持多个根元素，引用组件时，在组件标签上添加的 class 和 style 需要在组件内部显式地指明添加的位置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<my-component class="baz"></my-component>\n\napp.component(\'my-component\', {\n  template: `\n    <p :class="$attrs.class">Hi!</p>\n    <span>This is a child component</span>\n  `\n})\n')])])]),a("h2",{attrs:{id:"条件渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[e._v("#")]),e._v(" 条件渲染")]),e._v(" "),a("p",[e._v("Vue 3 中，"),a("code",[e._v("v-if")]),e._v(" 与 "),a("code",[e._v("v-for")]),e._v(" 一起使用时，"),a("code",[e._v("v-if")]),e._v(" 优先级高，这与 Vue 2 相反，对于原本需要同时使用的情况，建议使用计算属性过滤出可见数据列表。")]),e._v(" "),a("h2",{attrs:{id:"列表渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表渲染"}},[e._v("#")]),e._v(" 列表渲染")]),e._v(" "),a("h3",{attrs:{id:"v-for-中的-ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-for-中的-ref"}},[e._v("#")]),e._v(" "),a("code",[e._v("v-for")]),e._v(" 中的 "),a("code",[e._v("ref")])]),e._v(" "),a("p",[e._v("Vue 2 中，在 "),a("code",[e._v("v-for")]),e._v(" 的元素上使用 "),a("code",[e._v("ref")]),e._v(" 属性，会生成一个元素引用的数组。")]),e._v(" "),a("p",[e._v("Vue 3 中，该用法不再生成数组，可以给 "),a("code",[e._v("ref")]),e._v(" 绑定一个函数，当前元素会作为该函数的参数传入，从而手动添加到一个数组（或对象，使用迭代的 "),a("code",[e._v("key")]),e._v(" 作为键）中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<div v-for="item in list" :ref="setItemRef"></div>\n\nexport default {\n  data() {\n    return {\n      // 声明存放元素引用的数组\n      itemRefs: []\n    }\n  },\n  methods: {\n    // 给 ref 传入函数，手动将元素引用加入数组\n    setItemRef(el) {\n      this.itemRefs.push(el)\n    }\n  },\n  beforeUpdate() {\n    this.itemRefs = []\n  },\n  updated() {\n    console.log(this.itemRefs)\n  }\n}\n')])])]),a("h2",{attrs:{id:"事件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件处理"}},[e._v("#")]),e._v(" 事件处理")]),e._v(" "),a("h3",{attrs:{id:"绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绑定"}},[e._v("#")]),e._v(" 绑定")]),e._v(" "),a("p",[e._v("事件可以绑定多个处理函数，使用逗号分隔")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<button @click="one($event), two($event)">\n  Submit\n</button>\n\nmethods: {\n  one(event) {\n    //\n  },\n  two(event) {\n    //\n  }\n}\n')])])]),a("h3",{attrs:{id:"on-off-once"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#on-off-once"}},[e._v("#")]),e._v(" "),a("code",[e._v("$on")]),e._v(", "),a("code",[e._v("$off")]),e._v(", "),a("code",[e._v("$once")])]),e._v(" "),a("p",[e._v("这三个方法被移除，保留 "),a("code",[e._v("$emit")]),e._v(" 用于子组件触发由父组件处理的事件")]),e._v(" "),a("p",[e._v("event bus 官方推荐使用第三方库：mitt 或 tiny-emitter")]),e._v(" "),a("h2",{attrs:{id:"属性强制行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性强制行为"}},[e._v("#")]),e._v(" 属性强制行为")]),e._v(" "),a("p",[e._v("当元素的属性值为 "),a("code",[e._v("false")]),e._v(" 时不再移除属性，而是设置为 "),a("code",[e._v('attr="false"')]),e._v("，若要移除属性，请使用 "),a("code",[e._v("null")]),e._v(" 或 "),a("code",[e._v("undefined")])]),e._v(" "),a("h2",{attrs:{id:"自定义元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义元素"}},[e._v("#")]),e._v(" 自定义元素")]),e._v(" "),a("p",[a("code",[e._v("is")]),e._v(" 属性只能用于 "),a("code",[e._v("<component>")]),e._v(" 标签，其余标签中使用 "),a("code",[e._v("v-is")])]),e._v(" "),a("h2",{attrs:{id:"data-选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-选项"}},[e._v("#")]),e._v(" Data 选项")]),e._v(" "),a("p",[e._v("当从 mixins 合并 data 时，将使用浅合并")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Mixin = {\n  data() {\n    return {\n      user: {\n        name: 'Jack',\n        id: 1\n      }\n    }\n  }\n}\n\nconst CompA = {\n  mixins: [Mixin],\n  data() {\n    return {\n      user: {\n        id: 2\n      }\n    }\n  }\n}\n")])])]),a("p",[e._v("Vue 2 中，"),a("code",[e._v("$data")]),e._v(" 为")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  user: {\n    id: 2,\n    name: 'Jack' // Mixin 中的 name 属性也会并入\n  }\n}\n")])])]),a("p",[e._v("Vue 3 中，"),a("code",[e._v("$data")]),e._v(" 为")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  user: {\n    id: 2\n    // 被 data 中的 user 覆盖，不存在 name 属性\n  }\n}\n")])])]),a("h2",{attrs:{id:"filters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filters"}},[e._v("#")]),e._v(" Filters")]),e._v(" "),a("p",[e._v("Vue 3 中移除了 Filters ，官方建议在需要文本格式化的地方使用方法调用或计算属性。")]),e._v(" "),a("p",[e._v("可通过在 "),a("code",[e._v("app")]),e._v(" 实例上绑定全局函数，变相实现全局 Filters")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const app = createApp(App)\n\napp.config.globalProperties.$filters = {\n  currencyUSD(value) {\n    return '$' + value\n  }\n}\n\n<template>\n  <h1>Bank Account Balance</h1>\n  <p>{{ $filters.currencyUSD(accountBalance) }}</p>\n</template>\n")])])]),a("h2",{attrs:{id:"key-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-属性"}},[e._v("#")]),e._v(" "),a("code",[e._v("key")]),e._v(" 属性")]),e._v(" "),a("p",[e._v("在条件渲染 ("),a("code",[e._v("v-if")]),e._v("/"),a("code",[e._v("v-else")]),e._v("/"),a("code",[e._v("v-else-if")]),e._v(") 中，"),a("code",[e._v("key")]),e._v(" 属性不再建议使用，Vue 3 会自动生成唯一的 "),a("code",[e._v("key")]),e._v(" ，但如果手动提供了 "),a("code",[e._v("key")]),e._v(" ，则每个条件分支都需要一个唯一的 "),a("code",[e._v("key")]),e._v("。")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("<template v-for>")]),e._v(" 中使用 "),a("code",[e._v("key")]),e._v(" 时，现在需要将 "),a("code",[e._v("key")]),e._v(" 绑定于 "),a("code",[e._v("<template>")]),e._v(" 标签上，而不再是原先实际渲染的子元素。")]),e._v(" "),a("h2",{attrs:{id:"keycode-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keycode-修饰符"}},[e._v("#")]),e._v(" KeyCode 修饰符")]),e._v(" "),a("p",[e._v("不再支持使用按键码作为键盘事件修饰符，也不再支持使用 "),a("code",[e._v("config.keyCodes")]),e._v(" 配置按键码别名，Vue 3 中推荐使用 kebab-case 的按键名称作为修饰符。")]),e._v(" "),a("h2",{attrs:{id:"组件-props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件-props"}},[e._v("#")]),e._v(" 组件 Props")]),e._v(" "),a("p",[a("code",[e._v("props")]),e._v(" 中，指定默认值的 "),a("code",[e._v("default")]),e._v(" 工厂函数无法访问 "),a("code",[e._v("this")]),e._v(" ，取而代之的是，组件接收到的原始属性会最为参数传给工厂函数")]),e._v(" "),a("h2",{attrs:{id:"slots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slots"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),a("p",[a("code",[e._v("this.$slots")]),e._v(" 将 slots 暴露为函数")]),e._v(" "),a("p",[a("code",[e._v("this.$scopedSlots")]),e._v(" 被移除")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 2.x Syntax\nthis.$scopedSlots.header\n\n// 3.x Syntax\nthis.$slots.header()\n")])])]),a("h2",{attrs:{id:"过渡效果的样式类变更"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过渡效果的样式类变更"}},[e._v("#")]),e._v(" 过渡效果的样式类变更")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("v-enter")]),e._v(" => "),a("code",[e._v("v-enter-from")])]),e._v(" "),a("li",[a("code",[e._v("v-leave")]),e._v(" => "),a("code",[e._v("v-leave-from")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}\n\n.v-leave-from,\n.v-enter-to {\n  opacity: 1;\n}\n")])])]),a("p",[a("code",[e._v("<transition>")]),e._v(" 组件的属性名变更")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("leave-class")]),e._v(" => "),a("code",[e._v("leave-from-class")])]),e._v(" "),a("li",[a("code",[e._v("enter-class")]),e._v(" => "),a("code",[e._v("enter-from-class")])])]),e._v(" "),a("h2",{attrs:{id:"v-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-model"}},[e._v("#")]),e._v(" v-model")]),e._v(" "),a("p",[e._v("使用于自定义组件时，默认监听的属性和事件变更：")]),e._v(" "),a("ul",[a("li",[e._v("属性："),a("code",[e._v("value")]),e._v(" => "),a("code",[e._v("modelValue")])]),e._v(" "),a("li",[e._v("事件："),a("code",[e._v("input")]),e._v(" => "),a("code",[e._v("update:modelValue")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<ChildComponent v-model="pageTitle" />\n\n\x3c!-- 等价于 --\x3e\n\n<ChildComponent\n  :modelValue="pageTitle"\n  @update:modelValue="pageTitle = $event"\n/>\n')])])]),a("p",[e._v("上述改动在 Vue 2 中，等价于 "),a("code",[e._v("v-bind:modelValue.sync")]),e._v(" ，但在 Vue 3，"),a("code",[e._v("v-bind")]),e._v(" 的 "),a("code",[e._v(".sync")]),e._v(" 修饰符和组件 "),a("code",[e._v("model")]),e._v(" 选项均被移除，通过 "),a("code",[e._v("v-model:prop")]),e._v(" 的形式统一在 "),a("code",[e._v("v-model")]),e._v(" 的用法中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<ChildComponent v-model:title="pageTitle" />\n\n\x3c!-- 等价于 --\x3e\n\n<ChildComponent :title="pageTitle" @update:title="pageTitle = $event" />\n')])])]),a("p",[e._v("因此，同一组件支持使用多个 "),a("code",[e._v("v-model")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<ChildComponent v-model:title="pageTitle" v-model:content="pageContent" />\n\n\x3c!-- 等价于 --\x3e\n\n<ChildComponent\n  :title="pageTitle"\n  @update:title="pageTitle = $event"\n  :content="pageContent"\n  @update:content="pageContent = $event"\n/>\n')])])]),a("h3",{attrs:{id:"v-model-支持自定义修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-model-支持自定义修饰符"}},[e._v("#")]),e._v(" "),a("code",[e._v("v-model")]),e._v(" 支持自定义修饰符")]),e._v(" "),a("p",[e._v("目前支持的内置修饰符："),a("code",[e._v(".trim")]),e._v(", "),a("code",[e._v(".number")]),e._v(", "),a("code",[e._v(".lazy")])]),e._v(" "),a("p",[a("code",[e._v("v-model")]),e._v(" 上添加的自定义修饰符会通过组件的 "),a("code",[e._v("modelModifiers")]),e._v(" (无参 "),a("code",[e._v("v-model")]),e._v(") 或 "),a("code",[e._v("prop + 'Modifiers'")]),e._v(" (带参 "),a("code",[e._v("v-model:prop")]),e._v(") 属性传入，")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<my-component v-model.capitalize="bar"></my-component>\n\napp.component(\'my-component\', {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  template: `\n    <input type="text"\n      :value="modelValue"\n      @input="$emit(\'update:modelValue\', $event.target.value)">\n  `,\n  created() {\n    console.log(this.modelModifiers) // { capitalize: true } 组件调用时使用了的修饰符\n  }\n})\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<my-component v-model:foo.capitalize=\"bar\"></my-component>\n\napp.component('my-component', {\n  props: ['foo', 'fooModifiers'],\n  template: `\n    <input type=\"text\"\n      :value=\"foo\"\n      @input=\"$emit('update:foo', $event.target.value)\">\n  `,\n  created() {\n    console.log(this.fooModifiers) // { capitalize: true }\n  }\n})\n")])])]),a("p",[e._v("根据某属性的修饰符 map 中是否存在某个修饰符，做相应的数据处理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<my-component v-model:foo.capitalize=\"bar\"></my-component> // fooModifiers => { capitalize: true }\n\n// data handler\n...\nif (this.fooModifiers.capitalize) {\n  value = value.charAt(0).toUpperCase() + value.slice(1)\n}\n...\nthis.$emit('update:foo', value)\n")])])]),a("h2",{attrs:{id:"v-bind-合并行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-bind-合并行为"}},[e._v("#")]),e._v(" v-bind 合并行为")]),e._v(" "),a("p",[a("code",[e._v("v-bind")]),e._v(" 绑定顺序会影响渲染结果")]),e._v(" "),a("p",[e._v("Vue 2 中，单独绑定的属性会覆盖 "),a("code",[e._v('v-bind="object"')]),e._v(" 中的同名属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- template --\x3e\n<div id="red" v-bind="{ id: \'blue\' }"></div>\n\x3c!-- result --\x3e\n<div id="red"></div>\n')])])]),a("p",[e._v("Vue 3 中，按绑定顺序合并，后绑定的覆盖先绑定的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- template --\x3e\n<div id="red" v-bind="{ id: \'blue\' }"></div>\n\x3c!-- result --\x3e\n<div id="blue"></div>\n\n\x3c!-- template --\x3e\n<div v-bind="{ id: \'blue\' }" id="red"></div>\n\x3c!-- result --\x3e\n<div id="red"></div>\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);