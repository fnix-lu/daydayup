(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{368:function(a,e,t){"use strict";t.r(e);var s=t(41),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"typescript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[a._v("#")]),a._v(" TypeScript")]),a._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install -g typescript\n")])])]),t("h2",{attrs:{id:"编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[a._v("#")]),a._v(" 编译")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("tsc hello.ts\n")])])]),t("p",[a._v("TypeScript 中，使用 "),t("code",[a._v(":")]),a._v(" 指定变量的类型")]),a._v(" "),t("h2",{attrs:{id:"原始数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[a._v("#")]),a._v(" 原始数据类型")]),a._v(" "),t("h3",{attrs:{id:"布尔值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[a._v("#")]),a._v(" 布尔值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let isDone: boolean = false;\n")])])]),t("h3",{attrs:{id:"数值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数值"}},[a._v("#")]),a._v(" 数值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let decLiteral: number = 6;\n")])])]),t("h3",{attrs:{id:"字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("#")]),a._v(" 字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myName: string = 'Tom';\n")])])]),t("h3",{attrs:{id:"空值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空值"}},[a._v("#")]),a._v(" 空值")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("void")]),a._v(" 表示没有返回值的函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function alertName(): void {\n    alert('My name is Tom');\n}\n")])])]),t("h3",{attrs:{id:"null-和-undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[a._v("#")]),a._v(" Null 和 Undefined")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let n: null = null;\nlet u: undefined = undefined;\n")])])]),t("p",[t("code",[a._v("null")]),a._v(" 和 "),t("code",[a._v("undefined")]),a._v(" 是所有类型的子类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 这样不会报错\nlet num: number = undefined;\n\n// 这样也不会报错\nlet u: undefined;\nlet num: number = u;\n")])])]),t("p",[t("code",[a._v("void")]),a._v(" 类型的变量不能赋值给 "),t("code",[a._v("number")]),a._v(" 类型的变量")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let u: void;\nlet num: number = u;\n\n// Type 'void' is not assignable to type 'number'.\n")])])]),t("h2",{attrs:{id:"任意值类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任意值类型"}},[a._v("#")]),a._v(" 任意值类型")]),a._v(" "),t("p",[a._v("任意值 "),t("code",[a._v("any")]),a._v(" 用来表示允许赋值为任意类型")]),a._v(" "),t("p",[a._v("普通类型的变量在赋值时改变数据类型会报错")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myFavoriteNumber: string = 'seven';\nmyFavoriteNumber = 7;\n\n// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.\n")])])]),t("p",[t("code",[a._v("any")]),a._v(" 类型可以在赋值时改变数据类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myFavoriteNumber: any = 'seven';\nmyFavoriteNumber = 7;\n")])])]),t("p",[t("strong",[a._v("声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值")])]),a._v(" "),t("p",[t("strong",[a._v("变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let something;\n")])])]),t("p",[a._v("等价于")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let something: any;\n")])])]),t("h2",{attrs:{id:"类型推论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型推论"}},[a._v("#")]),a._v(" 类型推论")]),a._v(" "),t("p",[a._v("如果变量定义的时候有赋值，会根据该值做类型推论；而如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 "),t("code",[a._v("any")]),a._v(" 类型而完全不被类型检查")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myFavoriteNumber = 'seven';\n")])])]),t("p",[a._v("等价于")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myFavoriteNumber: string = 'seven';\n")])])]),t("h2",{attrs:{id:"联合类型-多种类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#联合类型-多种类型"}},[a._v("#")]),a._v(" 联合类型（多种类型）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myFavoriteNumber: string | number;\n")])])]),t("h3",{attrs:{id:"访问联合类型的属性和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问联合类型的属性和方法"}},[a._v("#")]),a._v(" 访问联合类型的属性和方法")]),a._v(" "),t("p",[a._v("当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们"),t("strong",[a._v("只能访问此联合类型的所有类型里共有的属性或方法")])]),a._v(" "),t("p",[a._v("以下 "),t("code",[a._v("length")]),a._v(" 不是 "),t("code",[a._v("string")]),a._v(" 和 "),t("code",[a._v("number")]),a._v(" 的共有属性，所以会报错")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function getLength(something: string | number): number {\n    return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n// Property 'length' does not exist on type 'number'.\n")])])]),t("h2",{attrs:{id:"对象的类型-interface"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的类型-interface"}},[a._v("#")]),a._v(" 对象的类型 —— "),t("code",[a._v("interface")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Person {\n    name: string;\n    age: number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25\n};\n")])])]),t("p",[t("strong",[a._v("赋值的时候，变量的形状必须和接口的形状保持一致，不能少属性或多属性。若要允许不完全匹配，使用可选属性")])]),a._v(" "),t("h3",{attrs:{id:"可选属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可选属性"}},[a._v("#")]),a._v(" 可选属性")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Person {\n    name: string;\n    age?: number;\n}\n\nlet tom: Person = {\n    name: 'Tom'\n};\n")])])]),t("p",[t("strong",[a._v("可选属性仍然不允许添加未定义的属性。若希望添加未定义的属性，使用任意属性")])]),a._v(" "),t("h3",{attrs:{id:"任意属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#任意属性"}},[a._v("#")]),a._v(" 任意属性")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Person {\n    name: string;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string | number;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25,\n    gender: 'male'\n};\n")])])]),t("p",[t("strong",[a._v("一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集")])]),a._v(" "),t("h3",{attrs:{id:"只读属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只读属性"}},[a._v("#")]),a._v(" 只读属性")]),a._v(" "),t("p",[a._v("使用 "),t("code",[a._v("readonly")]),a._v(" 限定对象的某些属性只能在创建的时候赋值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    id: 89757,\n    name: 'Tom',\n    gender: 'male'\n};\n\n// 此时赋值会报错\ntom.id = 9527;\n")])])]),t("p",[t("strong",[a._v("只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：对象赋值时其只读属性需要被赋值，对象赋值后不能再给只读属性赋值")])]),a._v(" "),t("h2",{attrs:{id:"数组类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[a._v("#")]),a._v(" 数组类型")]),a._v(" "),t("h3",{attrs:{id:"类型-方括号-表示法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型-方括号-表示法"}},[a._v("#")]),a._v(" 类型 + 方括号 表示法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let fibonacci: number[] = [1, 1, 2, 3, 5];\n")])])]),t("h3",{attrs:{id:"数组泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组泛型"}},[a._v("#")]),a._v(" 数组泛型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let fibonacci: Array<number> = [1, 1, 2, 3, 5];\n")])])]),t("h3",{attrs:{id:"用接口表示数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用接口表示数组"}},[a._v("#")]),a._v(" 用接口表示数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface NumberArray {\n    [index: number]: number;\n}\n\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n")])])]),t("h3",{attrs:{id:"类数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类数组"}},[a._v("#")]),a._v(" 类数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function sum() {\n    let args: {\n        [index: number]: number;\n        length: number;\n        callee: Function;\n    } = arguments;\n}\n")])])]),t("p",[a._v("常用的类数组在 TypeScript 中有内置的接口定义，如 "),t("code",[a._v("IArguments")]),a._v(", "),t("code",[a._v("NodeList")]),a._v(", "),t("code",[a._v("HTMLCollection")]),a._v(" 等")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function sum() {\n    let args: IArguments = arguments;\n}\n")])])]),t("p",[a._v("其中 "),t("code",[a._v("IArguments")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface IArguments {\n    [index: number]: any;\n    length: number;\n    callee: Function;\n}\n")])])]),t("h3",{attrs:{id:"数组中的-any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组中的-any"}},[a._v("#")]),a._v(" 数组中的 any")]),a._v(" "),t("p",[a._v("用 "),t("code",[a._v("any")]),a._v(" 表示数组中可以出现任意类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let list: any[] = ['xcatliu', 25, { website: 'http://xcatliu.com' }];\n")])])]),t("h2",{attrs:{id:"函数类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[a._v("#")]),a._v(" 函数类型")]),a._v(" "),t("h3",{attrs:{id:"函数声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[a._v("#")]),a._v(" 函数声明")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function sum(x: number, y: number): number {\n    return x + y;\n}\n")])])]),t("p",[a._v("此时，"),t("strong",[a._v("输入多余的（或者少于要求的）参数，是不被允许的，参数数量须一致")])]),a._v(" "),t("h3",{attrs:{id:"函数表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[a._v("#")]),a._v(" 函数表达式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n};\n")])])]),t("h3",{attrs:{id:"用接口定义函数的形状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用接口定义函数的形状"}},[a._v("#")]),a._v(" 用接口定义函数的形状")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface SearchFunc {\n    (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n}\n")])])]),t("h3",{attrs:{id:"可选参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可选参数"}},[a._v("#")]),a._v(" 可选参数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n")])])]),t("p",[a._v("可选参数必须接在必需参数后面，"),t("strong",[a._v("可选参数后面不允许再出现必需参数")])]),a._v(" "),t("h3",{attrs:{id:"参数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数默认值"}},[a._v("#")]),a._v(" 参数默认值")]),a._v(" "),t("p",[t("strong",[a._v("TypeScript 会将添加了默认值的参数识别为可选参数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n")])])]),t("h3",{attrs:{id:"剩余参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#剩余参数"}},[a._v("#")]),a._v(" 剩余参数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function push(array: any[], ...items: any[]) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n}\n\nlet a = [];\npush(a, 1, 2, 3);\n")])])]),t("h3",{attrs:{id:"重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[a._v("#")]),a._v(" 重载")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number | string): number | string {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n}\n")])])]),t("h2",{attrs:{id:"类型断言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[a._v("#")]),a._v(" 类型断言")]),a._v(" "),t("h3",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[a._v("#")]),a._v(" 语法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("值 as 类型\n")])])]),t("h3",{attrs:{id:"将一个联合类型断言为其中一个类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一个联合类型断言为其中一个类型"}},[a._v("#")]),a._v(" 将一个联合类型断言为其中一个类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface Cat {\n    name: string;\n    run(): void;\n}\ninterface Fish {\n    name: string;\n    swim(): void;\n}\n\nfunction isFish(animal: Cat | Fish) {\n    if (typeof (animal as Fish).swim === 'function') {\n        return true;\n    }\n    return false;\n}\n")])])]),t("h3",{attrs:{id:"将一个父类断言为更加具体的子类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将一个父类断言为更加具体的子类"}},[a._v("#")]),a._v(" 将一个父类断言为更加具体的子类")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("interface ApiError extends Error {\n    code: number;\n}\ninterface HttpError extends Error {\n    statusCode: number;\n}\n\nfunction isApiError(error: Error) {\n    if (typeof (error as ApiError).code === 'number') {\n        return true;\n    }\n    return false;\n}\n")])])]),t("h3",{attrs:{id:"将任何一个类型断言为-any"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将任何一个类型断言为-any"}},[a._v("#")]),a._v(" 将任何一个类型断言为 "),t("code",[a._v("any")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("window.foo = 1;\n\n// index.ts:1:8 - error TS2339: Property 'foo' does not exist on type 'Window & typeof globalThis'.\n")])])]),t("p",[a._v("上面的例子中，我们需要将 "),t("code",[a._v("window")]),a._v(" 上添加一个属性 "),t("code",[a._v("foo")]),a._v("，但 TypeScript 编译时会报错，提示我们 "),t("code",[a._v("window")]),a._v(" 上不存在 "),t("code",[a._v("foo")]),a._v(" 属性")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("(window as any).foo = 1;\n")])])]),t("h3",{attrs:{id:"将-any-断言为一个具体的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将-any-断言为一个具体的类型"}},[a._v("#")]),a._v(" 将 "),t("code",[a._v("any")]),a._v(" 断言为一个具体的类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function getCacheData(key: string): any {\n    return (window as any).cache[key];\n}\n\ninterface Cat {\n    name: string;\n    run(): void;\n}\n\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n")])])]),t("h2",{attrs:{id:"内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[a._v("#")]),a._v(" 内置对象")]),a._v(" "),t("p",[a._v("JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当作定义好的类型")]),a._v(" "),t("h3",{attrs:{id:"ecmascript-的内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-的内置对象"}},[a._v("#")]),a._v(" ECMAScript 的内置对象")]),a._v(" "),t("p",[t("code",[a._v("Boolean")]),a._v(", "),t("code",[a._v("Error")]),a._v(", "),t("code",[a._v("Date")]),a._v(", "),t("code",[a._v("RegExp")]),a._v(" 等")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let b: Boolean = new Boolean(1);\nlet e: Error = new Error('Error occurred');\nlet d: Date = new Date();\nlet r: RegExp = /[a-z]/;\n")])])]),t("h3",{attrs:{id:"dom-和-bom-的内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-和-bom-的内置对象"}},[a._v("#")]),a._v(" DOM 和 BOM 的内置对象")]),a._v(" "),t("p",[t("code",[a._v("Document")]),a._v(", "),t("code",[a._v("HTMLElement")]),a._v(", "),t("code",[a._v("Event")]),a._v(", "),t("code",[a._v("NodeList")]),a._v(" 等")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let body: HTMLElement = document.body;\nlet allDiv: NodeList = document.querySelectorAll('div');\ndocument.addEventListener('click', function(e: MouseEvent) {\n  // Do something\n});\n")])])]),t("h3",{attrs:{id:"用-typescript-写-node-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用-typescript-写-node-js"}},[a._v("#")]),a._v(" 用 TypeScript 写 Node.js")]),a._v(" "),t("p",[a._v("Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("npm install @types/node --save-dev\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);