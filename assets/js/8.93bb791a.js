(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{370:function(n,e,t){"use strict";t.r(e);var s=t(41),a=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"功能输入框"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能输入框"}},[this._v("#")]),this._v(" @ 功能输入框")]),this._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("<template>\n  <div class=\"at-input\">\n    <div\n      class=\"at-input-editor\"\n      contenteditable=\"true\"\n      ref=\"atInputEditor\"\n      @keydown=\"handleKeydown\"\n      @keyup=\"handleKeyup\"\n      @click=\"handleClick\"\n      @paste=\"handlePaste\"\n      data-placeholder=\"Write something... Enter @ to mention someone\"\n    ></div>\n\n    <div class=\"at-input-counter\"><span :class=\"{ danger: textCount > maxLength }\">{{ getTextCount() }}</span>/{{ maxLength }}</div>\n\n    <div :class=\"['at-input-selector', { show: atInputSelectorVisible }]\">\n      <ul class=\"user-list\" @scroll=\"handleScroll\" v-if=\"users && users.length > 0\">\n        <li\n          class=\"user-item\"\n          v-for=\"u in users\"\n          :key=\"u.id\"\n          @click=\"handleSelect(u)\"\n        >\n          {{ u.nickname }}\n        </li>\n      </ul>\n      <p class=\"at-input-selector-placeholder\" v-else>@ Someone: Enter keywords to search, or enter space to continue</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { debounce, trim, trimHtml } from '@/utils/utils'\n\nimport {\n  fetchUserPagingList\n} from '@/api'\n\nexport default {\n  name: 'AtInput',\n  props: {\n    maxLength: {\n      type: Number,\n      default: 2000\n    },\n    clear: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      lastRange: null,\n      // remote search\n      atInputSelectorVisible: false,\n      lastSearchKey: '',\n      users: [],\n      pageIndex: 1,\n      pageCount: 0,\n      currentUserNodeValue: '',\n      textCount: 0\n    }\n  },\n  watch: {\n    clear(n) {\n      if (n) {\n        this.$refs.atInputEditor.innerHTML = ''\n        this.getTextCount()\n      }\n    }\n  },\n  methods: {\n    getContent() {\n      const editor = this.$refs.atInputEditor\n      const content = {\n        html: editor ? trimHtml(editor.innerHTML) : '',\n        text: editor ? trim(editor.innerText) : ''\n      }\n\n      return content\n    },\n\n    getTextCount() {\n      return this.textCount = this.getContent().text.length\n    },\n\n    emitChange() {\n      this.$emit('change', this.getContent())\n    },\n\n    handleKeydown(e) {\n      // 获取字符输入前的光标\n      const selection = window.getSelection()\n      this.lastRange = selection.getRangeAt(0)\n\n      const startContainer = this.lastRange.startContainer\n      const parentNode = startContainer.parentNode\n\n      // 按下 @\n      if (e.code === 'Digit2' && e.shiftKey) {\n        // 如果在 @ 用户节点内按下 @，在进入新的 @ 用户节点之前，移除当前用户节点的 id\n        if (parentNode.className === 'at' && parentNode.childNodes.length === 1) {\n          parentNode.removeAttribute('data-id')\n        }\n\n        // 创建 @ 用户节点\n        const userNode = document.createElement('span')\n        userNode.className = 'at'\n        const textNode = document.createTextNode('@')\n        userNode.appendChild(textNode)\n\n        // 将用户节点插入光标内\n        this.lastRange.insertNode(userNode)\n\n        // 将光标移入 @ 用户节点内末尾\n        this.lastRange.setEnd(textNode, textNode.length)\n        this.lastRange.collapse()\n\n        e.preventDefault()\n        return\n      }\n\n      // 按下空格\n      if (e.code === 'Space' && !e.shiftKey) {\n        // 如果处于 @ 用户节点内末尾\n        if (parentNode.className === 'at' && parentNode.childNodes.length === 1 && this.lastRange.startOffset === startContainer.length) {\n          // 将光标移至节点外部之后\n          this.lastRange.setEndAfter(parentNode)\n          this.lastRange.collapse()\n\n          console.log(this.lastRange)\n\n          // 插入空格\n          const spaceNode = document.createTextNode('\\u00A0')\n          this.lastRange.insertNode(spaceNode)\n          this.lastRange.collapse()\n\n          e.preventDefault()\n        }\n      }\n    },\n\n    handleKeyup(e) {\n      // 获取最新的光标\n      const selection = window.getSelection()\n      this.lastRange = selection.getRangeAt(0)\n\n      const startContainer = this.lastRange.startContainer\n      const nodeValue = startContainer.nodeValue\n      const parentNode = startContainer.parentNode\n\n      if (parentNode.className === 'at' && parentNode.childNodes.length === 1) {\n        /* 松开按键时，若处于 @ 用户节点中 */\n\n        // 显示用户选项\n        this.atInputSelectorVisible = true\n\n        // 如果松开的是方向键（通过方向键移入节点），储存当点用户的节点字符\n        const arrows = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight']\n        if (arrows.includes(e.code)) {\n          this.currentUserNodeValue = nodeValue\n        }\n\n        // 如果节点字符（包括 @）不是原始内容了，移除当前用户节点的 id\n        if (nodeValue !== this.currentUserNodeValue) {\n          parentNode.removeAttribute('data-id')\n        }\n\n        // 提取关键字，如果关键字发生改变，远程查询用户\n        const result = /^@(.*)$/.exec(nodeValue)\n        const searchKey = result ? result[1] : ''\n        if (searchKey !== this.lastSearchKey) {\n          this.handleSearch(searchKey)\n          this.lastSearchKey = searchKey\n        }\n      } else {\n        /* 松开按键时，若不在 @ 用户节点中 */\n\n        // 重置并关闭用户选项\n        this.resetAtInputSelector()\n      }\n\n      this.emitChange()\n    },\n\n    handleClick(e) {\n      // 获取点击后的光标\n      const selection = window.getSelection()\n      this.lastRange = selection.getRangeAt(0)\n\n      const startContainer = this.lastRange.startContainer\n      const parentNode = startContainer.parentNode\n\n      if (parentNode.className === 'at' && parentNode.childNodes.length === 1) {\n        this.currentUserNodeValue = startContainer.nodeValue\n        this.handleKeyup(e)\n      } else {\n        this.resetAtInputSelector()\n      }\n    },\n\n    handlePaste() {\n      const selection = window.getSelection()\n      this.lastRange = selection.getRangeAt(0)\n\n      const startContainer = this.lastRange.startContainer\n      const parentNode = startContainer.parentNode\n\n      if (parentNode.className === 'at' && parentNode.childNodes.length === 1) {\n        parentNode.removeAttribute('data-id')\n      }\n    },\n\n    fetchUsers(searchKey) {\n      const params = {\n        pageNo: this.pageIndex,\n        pageSize: 20,\n        nickname: searchKey,\n        status: 1\n      }\n      fetchUserPagingList(params).then(res => {\n        this.pageCount = res.data.pages\n        this.users = this.pageIndex === 1\n          ? res.data.records\n          : this.users.concat(res.data.records)\n      })\n    },\n\n    handleSearch: debounce(function(searchKey) {\n      this.pageIndex = 1\n      this.fetchUsers(searchKey)\n    }),\n\n    handleSelect(user) {\n      const selection = window.getSelection()\n\n      // 设置 @ 用户节点的数据\n      const userNode = this.lastRange.startContainer.parentNode\n      userNode.innerHTML = '@' + user.nickname\n      userNode.setAttribute('data-id', user.id)\n\n      // 将光标移至节点外部末尾\n      this.lastRange.setEndAfter(userNode)\n      this.lastRange.collapse()\n\n      // 创建空格分隔符，并插入光标内\n      const spaceNode = document.createTextNode('\\u00A0')\n      this.lastRange.insertNode(spaceNode)\n      this.lastRange.collapse()\n\n      // 显示光标\n      selection.removeAllRanges()\n      selection.addRange(this.lastRange)\n\n      // 重置并关闭用户选项\n      this.resetAtInputSelector()\n\n      this.emitChange()\n    },\n\n    resetAtInputSelector() {\n      this.atInputSelectorVisible = false\n      this.lastSearchKey = ''\n      this.users = []\n      this.pageIndex = 1\n      this.pageCount = 0\n    },\n\n    handleScroll: debounce(function(e) {\n      const { scrollTop, scrollHeight, offsetHeight } = e.target\n      if (scrollTop > scrollHeight - offsetHeight - 5) {\n        const { pageIndex, pageCount } = this\n        if (pageIndex < pageCount) {\n          this.pageIndex++\n          this.fetchUsers(this.lastSearchKey)\n        }\n      }\n    })\n  }\n}\n<\/script>\n\n<style lang=\"less\" scoped>\n.at-input {\n  position: relative;\n}\n\n.at-input-editor {\n  line-height: 1.5em;\n  height: 4.5em;\n  padding: 0 4px;\n  overflow: auto;\n  outline-color: @primary-color;\n  -webkit-user-modify: read-write-plaintext-only;\n  &:empty::before {\n    content: attr(data-placeholder);\n    color: #C0C4CC;\n  }\n\n  /deep/ .at[data-id] {\n    color: @primary-color;\n  }\n}\n\n.at-input-counter {\n  color: #C0C4CC;\n  padding: 0 4px;\n  line-height: 30px;\n  float: left;\n  .danger {\n    color: @danger-color;\n  }\n}\n\n.at-input-selector {\n  border: 1px solid @border-color-base;\n  background: #fff;\n  position: absolute;\n  top: 64px;\n  left: -1px;\n  right: -1px;\n  z-index: 2;\n  display: none;\n  &.show {\n    display: block;\n  }\n\n  .at-input-selector-placeholder {\n    color: #C0C4CC;\n    padding: 0 4px;\n  }\n}\n\n.user-list {\n  line-height: 1.5em;\n  max-height: 15em;\n  overflow: auto;\n  .user-item {\n    padding: 0 4px;\n    cursor: pointer;\n    &:hover {\n      background: @primary-color-light;\n    }\n  }\n}\n</style>\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);